{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","convertDate","d","a","Date","String","slice","toHHMMSS","sec_num","parseInt","hours","Math","floor","minutes","seconds","useState","city","setCity","weather","setWeather","error","setError","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","press","key","fetch","then","r","json","result","cod","console","log","dt","name","sys","country","coord","lon","lat","round","feels_like","humidity","sunrise","sunset","wind","speed","deg","timezone","sign","abs","src","icon","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09ea7625.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nfunction App()\n{\n  const dateFun = (d) =>\n  {\n    let date = String(new window.Date());\n    date = date.slice(3,15) + \",\" + date.slice(15,21);\n    return date;\n  }\n  const convertDate = (d) =>\n  {\n    const a = new Date(d*1000);\n    return String(a).slice(16,24);\n  }\n  const toHHMMSS = (a) => {\n    var sec_num = parseInt(a, 10); // don't forget the second param\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   < 10) {hours   = \"0\"+hours;}\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return hours+':'+minutes+':'+seconds;\n}\n  const API = 'b699813d0d7caf37039051c08549ecd1';\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [error, setError] = useState('');\n  const search = (press) =>\n  {\n    if(press.key===\"Enter\")\n    {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=${API}`).then((r) => r.json()).then((result)=>{setCity(\"\"); setWeather(result); setError(result.cod); console.log(error); console.log(result)});\n    }\n  };\n\n  return(\n    <div className = {typeof weather.main !='undefined' ? (weather.main.temp>18 ? \"App-hot\" : \"App-cold\") : \"App\"}>\n     <div className =\"search-container\">\n        <input type=\"text\" placeholder=\"Enter City Name\" className=\"search-bar\" onChange={(e) => setCity(e.target.value)} value={city} onKeyPress={search} />\n      </div>\n      {error == \"404\"? (\n      <div className=\"location-container\">\n        <div className=\"location\">\n          City Not Found\n        </div>\n      </div>\n      ) : (\"\")\n      }\n      {typeof weather.main != \"undefined\" ? (\n\n        <div className=\"location-container\">\n        <div className=\"date\">\n          {String(new Date(weather.dt*1000)).slice(0,15)}\n          <br/>\n          {String(new Date()).slice(15,24)}\n        </div>\n        <div className=\"location\">\n          {weather.name},{weather.sys.country} ({weather.coord.lon}, {weather.coord.lat})\n        </div>\n        \n        <div className=\"weather-container\">\n            <div className=\"temperature\">\n              <p className=\"minmax\">\n              Feels Like: {Math.round(weather.main.feels_like)}\n              </p>\n              {Math.round(weather.main.temp)} C\n              <p className=\"minmax mt-0\">\n              Humidity: {Math.round(weather.main.humidity)}\n              </p>\n              <br/>\n\n              <p className=\"minmax mt-0\">\n                Sunrise: {convertDate(weather.sys.sunrise)}\n                <br/>\n                Sunset:  {convertDate(weather.sys.sunset)}\n                <br/>\n                Wind: {weather.wind.speed} m/s {weather.wind.deg} degree\n                <br/>\n                {console.log(\"Time ZONE\"+weather.timezone +\" \"+toHHMMSS(weather.timezone))}\n                Time Zone: {Math.sign(weather.timezone) == 1 ? \"+\" : \"-\"}{toHHMMSS(String(Math.abs(weather.timezone))).slice(0,5)} GMT\n              </p>\n            </div>\n            <div className=\"weather\">\n              <img className=\"icon-small\"src={'http://openweathermap.org/img/wn/'+weather.weather[0].icon+'@4x.png'}alt=\"\"/>\n              <br/>\n              <p className=\"weather-main\">{weather.weather[0].main}</p>\n            </div>\n        </div>\n      </div>\n      ) : (\"\")\n      }\n     \n    </div>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}